generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model VehicleType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  years  Year[]
  models Model[]
  offers Offer[]
}

model Year {
  id            Int         @id @default(autoincrement())
  year          Int
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  models Model[]
  offers Offer[]

  @@unique([year, vehicleTypeId])
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  models Model[]
  Offer  Offer[]
}

model Model {
  id            Int         @id @default(autoincrement())
  name          String
  brand         Brand       @relation(fields: [brandId], references: [id])
  brandId       Int
  year          Year        @relation(fields: [yearId], references: [id])
  yearId        Int
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  subModels SubModel[]
  offers    Offer[]

  @@unique([name, brandId, yearId, vehicleTypeId])
}

model SubModel {
  id        Int      @id @default(autoincrement())
  name      String
  model     Model    @relation(fields: [modelId], references: [id])
  modelId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bodyTypes BodyType[]
  offers    Offer[]

  @@unique([name, modelId])
}

model BodyType {
  id         Int      @id @default(autoincrement())
  name       String
  subModel   SubModel @relation(fields: [subModelId], references: [id])
  subModelId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  fuelTypes FuelType[]
  offers    Offer[]

  @@unique([name, subModelId])
}

model FuelType {
  id         Int      @id @default(autoincrement())
  name       String
  bodyType   BodyType @relation(fields: [bodyTypeId], references: [id])
  bodyTypeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  offers Offer[]

  @@unique([name, bodyTypeId])
}

model TransmissionType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offers Offer[]
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offers Offer[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  fullName  String
  phone     String
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  offers Offer[]
}

enum OfferStatus {
  PENDING
  CONTACTED
  OFFERED
  ACCEPTED
  REJECTED
  COMPLETED
}

enum DamageRecordStatus {
  NONE
  EXISTS
}

model Offer {
  id                 Int                @id @default(autoincrement())
  vehicleType        VehicleType        @relation(fields: [vehicleTypeId], references: [id])
  vehicleTypeId      Int
  year               Year               @relation(fields: [yearId], references: [id])
  yearId             Int
  brand              Brand              @relation(fields: [brandId], references: [id])
  brandId            Int
  model              Model              @relation(fields: [modelId], references: [id])
  modelId            Int
  subModel           SubModel           @relation(fields: [subModelId], references: [id])
  subModelId         Int
  bodyType           BodyType           @relation(fields: [bodyTypeId], references: [id])
  bodyTypeId         Int
  fuelType           FuelType           @relation(fields: [fuelTypeId], references: [id])
  fuelTypeId         Int
  transmissionType   TransmissionType   @relation(fields: [transmissionTypeId], references: [id])
  transmissionTypeId Int
  color              Color              @relation(fields: [colorId], references: [id])
  colorId            Int
  mileage            Int
  damageRecord       DamageRecordStatus @default(NONE)
  damageAmount       Float?
  contact            Contact            @relation(fields: [contactId], references: [id])
  contactId          Int
  notes              String?            @db.Text
  images             String[]
  status             OfferStatus        @default(PENDING)
  adminNotes         String?            @db.Text
  offerAmount        Float?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}
