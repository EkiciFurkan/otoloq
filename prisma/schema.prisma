// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  models        Model[]
  vehicleOffers VehicleOffer[]
}

model Model {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  brandId       Int
  brand         Brand          @relation(fields: [brandId], references: [id])
  versions      Version[]
  vehicleOffers VehicleOffer[]

  @@unique([brandId, name])
}

model Version {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  modelId       Int
  model         Model             @relation(fields: [modelId], references: [id])
  bodyTypes     BodyTypeVersion[]
  vehicleOffers VehicleOffer[]

  @@unique([modelId, name])
}

// Body Type main model
model BodyType {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  versions      BodyTypeVersion[]
  vehicleOffers VehicleOffer[]
}

model BodyTypeVersion {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  versionId  Int
  version    Version        @relation(fields: [versionId], references: [id])
  bodyTypeId Int
  bodyType   BodyType       @relation(fields: [bodyTypeId], references: [id])
  fuelTypes  FuelTypeBody[]

  @@unique([versionId, bodyTypeId])
}

// Fuel Type main model
model FuelType {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bodyTypes     FuelTypeBody[]
  vehicleOffers VehicleOffer[]
}

// Relationship table between Body Type and Fuel Type
model FuelTypeBody {
  id                Int                    @id @default(autoincrement())
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  bodyVersionId     Int
  bodyVersion       BodyTypeVersion        @relation(fields: [bodyVersionId], references: [id])
  fuelTypeId        Int
  fuelType          FuelType               @relation(fields: [fuelTypeId], references: [id])
  transmissionTypes TransmissionTypeFuel[]

  @@unique([bodyVersionId, fuelTypeId])
}

// Transmission Type main model
model TransmissionType {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  fuelTypes     TransmissionTypeFuel[]
  vehicleOffers VehicleOffer[]
}

// Relationship table between Fuel Type and Transmission Type
model TransmissionTypeFuel {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  fuelBodyId         Int
  fuelBody           FuelTypeBody     @relation(fields: [fuelBodyId], references: [id])
  transmissionTypeId Int
  transmissionType   TransmissionType @relation(fields: [transmissionTypeId], references: [id])
  years              VehicleYear[]

  @@unique([fuelBodyId, transmissionTypeId])
}

model VehicleYear {
  id                     Int                  @id @default(autoincrement())
  year                   Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  transmissionTypeFuelId Int
  transmissionTypeFuel   TransmissionTypeFuel @relation(fields: [transmissionTypeFuelId], references: [id])
  mileages               Mileage[]

  @@unique([transmissionTypeFuelId, year])
}

model Mileage {
  id            Int            @id @default(autoincrement())
  minKm         Int
  maxKm         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  vehicleYearId Int
  vehicleYear   VehicleYear    @relation(fields: [vehicleYearId], references: [id])
  colors        ColorMileage[]

  @@unique([vehicleYearId, minKm, maxKm])
}

model Color {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  mileages      ColorMileage[]
  vehicleOffers VehicleOffer[]
}

model ColorMileage {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  mileageId       Int
  mileage         Mileage          @relation(fields: [mileageId], references: [id])
  colorId         Int
  color           Color            @relation(fields: [colorId], references: [id])
  accidentRecords AccidentRecord[]

  @@unique([mileageId, colorId])
}

model AccidentRecord {
  id             Int          @id @default(autoincrement())
  status         String
  amount         Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  colorMileageId Int
  colorMileage   ColorMileage @relation(fields: [colorMileageId], references: [id])
  vehicles       Vehicle[]
}

model Vehicle {
  id               Int            @id @default(autoincrement())
  price            Float
  registrationDate DateTime       @default(now())
  updateDate       DateTime       @updatedAt
  accidentRecordId Int
  accidentRecord   AccidentRecord @relation(fields: [accidentRecordId], references: [id])
  description      String?
  listingStatus    String         @default("Active")
}

model VehicleOffer {
  id                 Int               @id @default(autoincrement())
  year               Int?
  kilometer          Int?
  accidentStatus     String?
  accidentAmount     Float?
  status             String
  displayValues      String?
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  processedAt        DateTime?
  brandId            Int?
  brand              Brand?            @relation(fields: [brandId], references: [id])
  modelId            Int?
  model              Model?            @relation(fields: [modelId], references: [id])
  versionId          Int?
  version            Version?          @relation(fields: [versionId], references: [id])
  bodyTypeId         Int?
  bodyType           BodyType?         @relation(fields: [bodyTypeId], references: [id])
  fuelTypeId         Int?
  fuelType           FuelType?         @relation(fields: [fuelTypeId], references: [id])
  transmissionTypeId Int?
  transmissionType   TransmissionType? @relation(fields: [transmissionTypeId], references: [id])
  colorId            Int?
  color              Color?            @relation(fields: [colorId], references: [id])
  notes              String?
  adminNotes         String?
}
